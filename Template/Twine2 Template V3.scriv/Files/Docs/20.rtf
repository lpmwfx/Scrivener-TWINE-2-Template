{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 Raleway,Helvetica Neue,Helvetica,Arial,sans-serif;}{\f2\fmodern\fcharset0\fprq2 Georgia,Times New Roman,Times,serif;}{\f3\fmodern\fcharset0\fprq1 Menlo,Monaco,Consolas,Courier New,monospace;}{\f4\fmodern\fcharset0\fprq2 Georgia,Times New Roman,Times,serif;}{\f5\fmodern\fcharset0\fprq1 Menlo,Monaco,Consolas,Courier New,monospace;}{\f6\fmodern\fcharset0\fprq1 Menlo,Monaco,Consolas,Courier New,monospace;}{\f7\fmodern\fcharset0\fprq2 Georgia,Times New Roman,Times,serif;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;\red51\green51\blue51;\red69\green130\blue236;\red199\green37\blue78;\red249\green242\blue244;\red245\green245\blue245;}
{\*\listtable
{\list\listtemplateid1\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f2\fs-2\b0\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f2\fs-2\b0\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f2\fs-2\b0\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f2\fs-2\b0\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid
{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\'01\loch\af0\hich\af0\dbch\af0\uc1\u9679\'3F;}{\levelnumbers;}\f2\fs-2\b0\i0\cf3\fi-360\li720\lin720}{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \sa220\sb440\ltrch\loch {\f1\fs48\b1\i0\cf3\cb2\highlight2 Full documentation}
\par\plain {\f1\fs36\b1\i0\cf3\cb2\highlight2 R}{\f1\fs36\b1\i0\cf3\cb2\highlight2 elationship to Twine}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Twee2 is built on top of}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "http://twinery.org/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Twine 2}}{\f2\fs-2\b0\i0\cf3 , minus the graphical user interface. As a result, virtually all of the\~}{\field{\*\fldinst HYPERLINK "http://twinery.org/wiki/twine2:guide"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 documentation about Twine 2}}{\f2\fs-2\b0\i0\cf3 \~(and specifically the documentation about the\~}{\field{\*\fldinst HYPERLINK "http://twinery.org/wiki/twine2:how_to_choose_a_story_format"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 different story formats}}{\f2\fs-2\b0\i0\cf3 ) is relevant to Twee2, too. Because Twee2 is inspired by Twee, its documentation is also a valuable resource: however note that you can't use Twee 'macros' in Twee2.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 W}{\f1\fs36\b1\i0\cf3\cb2\highlight2 riting and compiling code}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Write Twee2 code using your favourite text editor. Syntax highlighting is available via}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "https://github.com/monospaced/sublime-twee"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 this Sublime Text plugin}}{\f2\fs-2\b0\i0\cf3 \~for Twee. By convention, Twee2 source files have the\~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 .tw2}{\f2\fs-2\b0\i0\cf3 \~extension.}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Compile Twee2 files using the}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2}{\f2\fs-2\b0\i0\cf3 \~command-line tool. There are two important modes of operation:}
\par\pard\plain \li720\fi-360\ltrch\loch \ls1\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 build input.tw2 output.html}{\f2\fs-2\b0\i0\cf3 \~produces output.html based on the code in input.tw2}
\par\pard\plain \li720\fi-360\sa220\ltrch\loch \ls1\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 watch input.tw2 output.html}{\f2\fs-2\b0\i0\cf3 \~does the same thing, but\~}{\f4\fs-2\b0\i1\cf3 watches}{\f2\fs-2\b0\i0\cf3 \~input.tw2 for changes, automatically recompiling whenever it is updated (note that it's not smart enough to understand when\~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#includes"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 'included'}}{\f2\fs-2\b0\i0\cf3 \~files have been changed, though).}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Because Twee2 source files are just plain text files, they're well-suited to use with source control systems: you could, for example, use}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "https://github.com/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Github}}{\f2\fs-2\b0\i0\cf3 \~to share your code or to collaborate with other authors, even working on the same file.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 U}{\f1\fs36\b1\i0\cf3\cb2\highlight2 nderstanding story formats}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Twee2 comes with built-in support for all of the same story formats that Twine 2 does:}
\par\pard\plain \li720\fi-360\ltrch\loch \ls2\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\field{\*\fldinst HYPERLINK "http://twine2.neocities.org/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Harlowe}}{\f2\fs-2\b0\i0\cf3 \~- the default format, which includes a simplified scripting format}
\par\plain \ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\field{\*\fldinst HYPERLINK "https://bitbucket.org/klembot/snowman-2"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Snowman}}{\f2\fs-2\b0\i0\cf3 \~- a minimal format that uses Underscore.js templates and jQuery to provide programmers with a powerful toolset}
\par\plain \ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\field{\*\fldinst HYPERLINK "http://www.motoslave.net/sugarcube/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 SugarCube}}{\f2\fs-2\b0\i0\cf3 \~- a TiddlyWiki-powered format that comes with support for multiple save 'slots' and a Twine 1/Twee 'macro'-like scripting syntax}
\par\pard\plain \li720\fi-360\sa220\ltrch\loch \ls2\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f2\fs-2\b0\i0\cf3 Paperthin - used when you select "View Proofing Copy" in Twine 2, this minimal skeleton isn't really an output format as it is a proofing tool}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 If you've having difficulty choosing between them, there's}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "http://twinery.org/wiki/twine2:how_to_choose_a_story_format"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 a summary of the differences}}{\f2\fs-2\b0\i0\cf3 \~in the Twine 2 documentation.}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 To specify which format to use during compilation, use the optional}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 --format}{\f2\fs-2\b0\i0\cf3 \~parameter. E.g. you might type\~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 build input.tw2 output.html --format=Snowman}{\f2\fs-2\b0\i0\cf3 . You can get a list of the formats that Twee2 natively understands by running\~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 formats}{\f2\fs-2\b0\i0\cf3 .}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 It's possible to use any story format, e.g. if you've downloaded or written your own, by specifying the path to the story format's directory (the one containing the format.js file) in your}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 --format}{\f2\fs-2\b0\i0\cf3 \~parameter. For example, you might run}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 build input.tw2 output.html --format=./MyFormat}{\f2\fs-2\b0\i0\cf3 .}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Rather than setting the format on the command-line, it's possible to specify it within your source code itself, using}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#build-config"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 build configuration}}{\f2\fs-2\b0\i0\cf3 \~options.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 T}{\f1\fs36\b1\i0\cf3\cb2\highlight2 wee2 syntax}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Twee2 uses a syntax that's heavily inspired-by but not 100% compatible with Twee:}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 P}{\f1\fs28\b1\i0\cf3\cb2\highlight2 assages}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Each block of text in Twee2 exists in a}{\f2\fs-2\b0\i0\cf3 \~}{\f4\fs-2\b0\i1\cf3 passage}{\f2\fs-2\b0\i0\cf3 . Each passage begins with a title, which is prefixed by two colons:}
\par\plain {\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::My Passage Name}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Passage titles may only contain letters, numbers, basic punctuation, and spaces. Some authors prefer to avoid spaces in their passage titles. Passage titles are not case-sensitive: you don't have to use the same case when referring to a passage every time. Passages titles}{\f2\fs-2\b0\i0\cf3 \~}{\f4\fs-2\b0\i1\cf3 should}{\f2\fs-2\b0\i0\cf3 \~be unique within a story: if they're not, only the last passage with a given title will be included in the story.}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Passage titles may optionally be suffixed by one or both of:}
\par\pard\plain \li720\fi-360\ltrch\loch \ls3\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f2\fs-2\b0\i0\cf3 Any number of\~}{\f4\fs-2\b0\i1\cf3 tags}{\f2\fs-2\b0\i0\cf3 , separated by spaced, inside a pair of square brackets. E.g:\~\line }{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::My Passage Name [tagone tagtwo]}{\f2\fs-2\b0\i0\cf3 \~\line Tags can be used by code in your story (e.g. to send the player to a randomly-selected passage from a subset).}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#twee2-syntax-special-passages"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Some tags have special meanings}}{\f2\fs-2\b0\i0\cf3 , as described below.}
\par\pard\plain \li720\fi-360\sa220\ltrch\loch \ls3\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f2\fs-2\b0\i0\cf3 A pair of coordinates, separated by a comma and enclosed within angle brackets. E.g.:\~\line }{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::My Passage Name <123,456>}{\f2\fs-2\b0\i0\cf3 \~\line Coordinates have no meaning to Twee2, but they can be used to enhance compatability with Twine 2: Twine 2 uses these coordinates to decide where to show the passages in its WYSIWYG editor.}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 If you include both tags and coordinates after a passage, the tags must come before the coordinates, e.g.:}
\par\plain {\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::My Passage Name [tagone tagtwo] <123,456>}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Some passages and tags}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#twee2-syntax-special-passages"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 have special meanings}}{\f2\fs-2\b0\i0\cf3 , as described below}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 C}{\f1\fs28\b1\i0\cf3\cb2\highlight2 ontent}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Each passage may contain any amount of content, most of which will be stuff that the player sees. Many story formats understand}{\f2\fs-2\b0\i0\cf3 \~}{\f4\fs-2\b0\i1\cf3 Markdown}{\f2\fs-2\b0\i0\cf3 \~formatting in passages, which makes it possible to easily add formatting to your passages. Links to different passages are supported in any of the following syntaxes (where 'Dungeon' is the name of the passage they'll be transported if they click the link, and 'click here', where present, is the text that they'll see to click on):}
\par\pard\plain \li720\fi-360\ltrch\loch \ls4\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 [Dungeon]}
\par\plain \ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 [click here->Dungeon]}
\par\plain \ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 [Dungeon<-click here]}
\par\pard\plain \li720\fi-360\sa220\ltrch\loch \ls4\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 [click here|Dungeon]}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 S}{\f1\fs36\b1\i0\cf3\cb2\highlight2 pecial passages}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Some passage names and tags have special meanings. These are:}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 ::Start}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 The}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::Start}{\f2\fs-2\b0\i0\cf3 \~passage will, by default, be used as the initial passage that your player sees when they start reading. You can override this using\~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#build-config"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 build configuration options}}{\f2\fs-2\b0\i0\cf3 , but it's probably easier just to follow this convention.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 ::StorySubtitle, ::StoryAuthor, ::StoryMenu, and ::StorySettings}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 These names were used for special passages in Twee 1. They're not used by Twee2, but to maintain compatability with Twee 1 they're ignored and you should avoid using them unless you're writing a story that needs to be capable of being compiled by both Twee 1 and Twee2.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 ::StoryIncludes}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Any}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::StoryIncludes}{\f2\fs-2\b0\i0\cf3 \~passages (you can have as many as you like, but you probably should avoid having more than one in any file in order to avoid confusion) are treated as lists of secondary Twee2 files to 'include' into your story. This is described in more detail below, under\~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#includes"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 splitting your code into multiple files}}{\f2\fs-2\b0\i0\cf3 .}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 [stylesheet]}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Any passages with the 'stylesheet' tag will not be included in your story, but their contents will be injected into the story's stylesheet. For example, you could write:}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::MyCoolStylesheet [stylesheet]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 body \{}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   background: #eee;}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 \}}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 tw-passage tw-link \{}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   color: red;}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 \}}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 It's also possible to use}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "http://sass-lang.com/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 SASS}}{\f2\fs-2\b0\i0\cf3 \~to enhance your stylesheet. Simply add the tag 'sass' or 'scss' to specify the dialect of SASS that you want to use, e.g.:}
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::MyCoolStylesheet [scss stylesheet]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 body \{}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   background: #eee;}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 \}}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 tw-passage \{}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   tw-link \{}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7     color: red;}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   \}}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 \}}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 [script]}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Any passages with the 'script' tag will not be included in your story, but their contents will be injected into the resulting web page as Javascript. For example, you could write:}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::SomeAwesomeCode [script]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 alert('This message will appear when the adventure starts!');}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 It's also possible to use}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "http://coffeescript.org/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 Coffeescript}}{\f2\fs-2\b0\i0\cf3 \~to make your Javascript development more-beautiful. Simply add the tag 'coffee' to your script block:}
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::SomeAwesomeCode [coffee script]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 alert 'This message will appear when the adventure starts!'}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 [haml]}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Put the 'haml' tag into your regular passages in order to allow you to write}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "http://haml.info/"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 HAML}}{\f2\fs-2\b0\i0\cf3 \~code into your passages. HAML is a sophisticated templating language for producing HTML output, and for some it might be preferable to writing plain old Markdown. This includes the ability to inject Javascript/CoffeeScript into particular passages. For example, you could write:}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::NicksBar [haml]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   Nick's Bar is exactly the kind of nightspot that helps you remember why you quit drinking.}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   A depressed-looking barman pours another beer for an equally depressed-looking drunk, while}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   over in the corner a street thug plays with a knife as he eyes you up. The floor is sticky}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   and the air reeks of stale alcohol.}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   %strong What would you like to do?}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %ul}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   %li [Nick<-Talk to the bartender]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   %li [BarToilet<-Go to the bathroom]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   %li [BarSit<-Sit in a booth]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 :coffeescript}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   $ ->}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7     alert "This message will appear when you reach Nick's Bar!"}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 [twee2]}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Passages marked with the 'twee2' tag are not included in your story. However, any Ruby code in them will be executed when the passage is processed by the builder. This can be used to}{\f2\fs-2\b0\i0\cf3 \~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#build-config"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 set build configuration options}}{\f2\fs-2\b0\i0\cf3 \~as described below.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 S}{\f1\fs36\b1\i0\cf3\cb2\highlight2 plitting your code into multiple files}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 A major benefit of Twee2 over Twine 2 is that it's possible to break apart your story into multiple files, which can be used to structure your work, to facilitate teamworking with or without source control, and to make 'reusable' components such as stylesheets and scripts which can then be injected into later stories. There are two ways to do this:}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 Using ::StoryIncludes}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Insert a}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::StoryIncludes}{\f2\fs-2\b0\i0\cf3 \~passage into your file and list within it the names of the files to include. Each will be appended to the end of your story before compilation. For example, the following game skeleton includes the contents of four other files - the main file contains only the\~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::Start}{\f2\fs-2\b0\i0\cf3 \~passage:}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::Start}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 **Journey To The Centre Of The Earth**}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 by Dan Q}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 [Play]}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::StoryIncludes}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 first_section.tw2}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 second_section.tw2}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 stylesheet.tw2}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 javascripts.tw2}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs28\b1\i0\cf3\cb2\highlight2 Using ::@include directives}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 You can put an}{\f2\fs-2\b0\i0\cf3 \~}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::@include}{\f2\fs-2\b0\i0\cf3 \~directive anywhere in your code to insert the contents of another file at that point.}{\f3\fs-2\b0\i0\cf5\cb6\highlight6 ::@include}{\f2\fs-2\b0\i0\cf3 \~respects your current indentation level (e.g. when using HAML), so it's safe to use at any indentation 'depth'. For example, the following passages each include a separate file that contains a description of the house in the distance: that description is shared between the two passages, and updating the file updates the description in both.}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::Greenhouse [haml]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   Light shines brightly through the tall glass walls of the ornate wrought-iron greenhouse, and}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   the plants are verdant and lively. The [Garden<-door] stands open and a cool breeze blows in.}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   ::@include description-of-house.tw2}
\par\plain \f3\fs-2\b0\i0\cf3\cb7\highlight7
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::Garden [haml]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7   The garden winds around decorative trees betwen the [greenhouse] and the [Porch<-mansion].}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 %p}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7   ::@include description-of-house.tw2}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Note that neither method of including code works recursively (i.e. you can't include a file that in turn includes another file), but this may be fixed in a future version.}
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 S}{\f1\fs36\b1\i0\cf3\cb2\highlight2 etting build configuration options}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 Creating a passage with the 'twee2' tag can be used to run arbritrary Ruby code or to pass additional options to the Twee2 compiler. This expands the potential capability of Twee2 almost-limitlessly, but for now the only supported options are:}
\par\pard\plain \li720\fi-360\ltrch\loch \ls5\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f5\fs-2\b1\i0\cf5\cb6\highlight6 Twee2::build_config.story_ifid = '}{\f6\fs-2\b1\i1\cf5\cb6\highlight6 [your IFID]}{\f5\fs-2\b1\i0\cf5\cb6\highlight6 '}{\f7\fs-2\b1\i0\cf3 \~}{\f2\fs-2\b0\i0\cf3 - used to set the\~}{\field{\*\fldinst HYPERLINK "http://www.ifwiki.org/index.php/IFID"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 IFID of your story, to facilitate catologuing. If you}}{\f2\fs-2\b0\i0\cf3 \~don't include this directive, the compiler will suggest a random one to you every time you run it and explain how to add it: if you're going to publish your story publicly, you should add the line it suggests before you do so.}
\par\pard\plain \li720\fi-360\sa220\ltrch\loch \ls5\ilvl0{\listtext\f2\fs-2\b0\i0\cf3	\loch\af2\hich\af2\dbch\af2\uc1\u9679\'3F	}{\f5\fs-2\b1\i0\cf5\cb6\highlight6 Twee2::build_config.story_format = '}{\f6\fs-2\b1\i1\cf5\cb6\highlight6 [a story format]}{\f5\fs-2\b1\i0\cf5\cb6\highlight6 '}{\f7\fs-2\b1\i0\cf3 \~}{\f2\fs-2\b0\i0\cf3 - an alternative way of specifying the story format used by your story, rather than using the --format switch to the compiler. The syntax of format names and means of specifying externally-stored formats is identical to\~}{\field{\*\fldinst HYPERLINK "https://dan-q.github.io/twee2/documentation.html#story-formats"}{\fldrslt\f2\fs-2\b0\i0\cf4\cb1\highlight1 using the --format switch}}{\f2\fs-2\b0\i0\cf3 .}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 For example:}
\par\plain {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 ::Configuration [twee2]}
\par\plain {\f3\fs-2\b0\i0\cf3\cb7\highlight7 Twee2::build_config.story_ifid = '41AB7776-D198-40F5-BD54-0493D49DA58C'}
\par\pard\plain \sa220\ltrch\loch {\f3\fs-2\b0\i0\cf3\cb7\highlight7 Twee2::build_config.story_format = 'Snowman'}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3 \line }
\par\pard\plain \sa220\sb440\ltrch\loch {\f1\fs36\b1\i0\cf3\cb2\highlight2 D}{\f1\fs36\b1\i0\cf3\cb2\highlight2 ecompiling Twine 2 stories}
\par\pard\plain \sa220\ltrch\loch {\f2\fs-2\b0\i0\cf3\cb2\highlight2 It's possible to convert existing (compiled) Twee2/Twine 2 story files, in HTML format, back into Twee2 source files for further editing. This can be used to convert your Twine 2 projects into Twee2 files or to easily examine the contents of somebody else's story. This feature does not work on Microsoft Windows. To use it, run:}
\par\plain {\f3\fs-2\b0\i0\cf5\cb6\highlight6 twee2 decompile input.html output.tw2}
\par\plain {\f2\fs-2\b0\i0\cf3\cb2\highlight2 The input HTML file can optionally be a full web URL.}}